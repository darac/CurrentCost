#!/usr/bin/perl

use Getopt::Mixed;
use POSIX qw(mkfifo strftime);
use IO::Handle;
use Time::HiRes qw(sleep);

# Get options
Getopt::Mixed::init('d=s t=s device>d type>t');
while ( my ( $option, $value, $pretty ) = Getopt::Mixed::nextOption() ) {
  OPTION: {
        $option eq 'd' and do {
            $DevName = $value;
            next OPTION;
        };
        $option eq 't' and do {
            $DevType = $value;
            next OPTION;
        };
    }
}
Getopt::Mixed::cleanup();
die "You must specify a device (--device=???)" unless $DevName;
if ( not $DevType ) {
    warn "Assuming CC128. Override with --type\n";
    $DevType = "CC128";
}
if ( uc($DevType) ne "CC128" and uc($DevType) ne "CC02" ) {
    die "Don't know how to simulate a $DevType device";
}

# Ready to go
if ( $DevName eq '-' ) {

    # Allow piping to stdout
    $FIFO = *STDOUT;
}
else {
    POSIX::mkfifo( $DevName, 0777 ) || die "mkfifo $DevName failed: $!";
    open( $FIFO, '>', $DevName ) || die "Can't open fifo $DevName: $!";
}
$FIFO->autoflush;
*STDERR->autoflush;
$|++;

local $SIG{PIPE} = sub {print STDERR "Ouch, SIGPIPE! Reopening...\n"; open( $FIFO, '>', $DevName ) || die "Can't open fifo $DevName: $!";};

my $message;
my $value = int (rand (10000)); # Random up to 10kW
my $spike = -1;
my $delta = 0;
while (1) {
    # Attempt to add some "Random Walk" properties
    $delta = int(rand(100)) - 50;
    $value += $delta;
    # Reset if out of bounds
    if ($value < 0 or $value >= 10000){
        $value = int(rand(10000));
        $delta = 0;
    }
    if (rand() < 0.05){
        # Attempt to add a bit more randomness
        $spike = int (rand (10000));
    } else {
        $spike = -1;
    }

    if ( uc($DevType) eq "CC02" ) {

        # Classic format
        $message = "<msg><date><dsb>00001</dsb>";
        $message .=
          POSIX::strftime( "<hr>%H</hr><min>%M</min><sec>%S</sec>", localtime );
        $message .= "<src><name>CC02</name><id>00000</id>";
        $message .= "<type>1</type><sver>0.07</sver></src>";
        if ($spike == -1){
            $message .= "<ch1><watts>$value</watts></ch1><tmpr>";
        } else {
            $message .= "<ch1><watts>$spike</watts></ch1><tmpr>";
        }
        $message .= sprintf( "%.1f", rand(10) + 20 );         # Random 20 to 30
        $message .= "</tmpr></msg>\n";
    }
    else {

        # New format
        $message = "<msg><src>CC128-v0.11</src><dsb>0001</dsb>";
        $message .= POSIX::strftime( "<time>%H:%M:%S</time>", localtime );
        $message .= sprintf( "<tmpr>%.1f</tmpr>", rand(10) + 20 );
        $message .= "<sensor>0</sensor><id>00000</id><type>1</type>";
        if ($spike == -1){
            $message .= "<ch1><watts>$value</watts></ch1></msg>\n";
        } else {
            $message .= "<ch1><watts>$spike</watts></ch1></msg>\n";
        }
    }
    print $FIFO $message || open ($FIFO, '>', $DevName) || die "Can't reopen FIFO: $!";

    my $msg = "";
    if ($spike != -1){
        $msg = "  SPIKE  ";
    } elsif ($delta < 0){
        $msg = sprintf "DOWN %3dW", abs($delta);
    } elsif ($delta > 0) {
        $msg = sprintf "UP   %3dW", abs($delta);
    } else {
        $msg = "  LEVEL  ";
    }

    printf STDERR "Current Reading: %5dW (%s)\r", $value, $msg;
    *STDERR->flush();
    sleep rand()+5.5;
}
